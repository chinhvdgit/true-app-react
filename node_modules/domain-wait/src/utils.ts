import * as domain from 'domain';
import * as domainContext from 'domain-context';

import { domainTaskBaseUrlStateKey } from "./Constants";
import { options } from './options';

declare var process: any;

export function isNode(): boolean {
    return typeof process === 'object' && process.versions && !!process.versions.node;
}

export function getBaseUrl(url?: string): string {
    let noDomainBaseUrl: string = "";
    if (url) {
        if (domain.active) {
            // There's an active domain (e.g., in Node.js), so associate the base URL with it.
            domainContext.set(domainTaskBaseUrlStateKey, url);
        } else {
            // There's no active domain (e.g., in browser), so there's just one shared base URL.
            noDomainBaseUrl = url;
        }
    }
    var baseUrl = domain.active ? domainContext.get(domainTaskBaseUrlStateKey) : noDomainBaseUrl;
    if (options.isDebug) {
        options.logFn(`Base url for fetching is: ${baseUrl}`);
    }
    return baseUrl;
}

export function getNodeOriginUrl(): string {
    let base = getBaseUrl();
    if (base && base.endsWith("/")) {
        return base.substring(0, base.length - 1);
    }
    return null;
}

export function transformUrl(url: string) {

    if (isNode()) {

        const oldUrl = url;

        const http = "http";
        const https = "https";

        const originUrl = getNodeOriginUrl();

        const isOriginHttps = originUrl.indexOf(https) > -1;

        if (isOriginHttps) {

            if (
                process.env &&
                process.env.HttpsToHttpUrlTransform == "true" &&
                process.env.ServerHttpsUrls &&
                process.env.ServerHttpUrls
            ) {

                const serverHttpsUrls = JSON.parse(process.env.ServerHttpsUrls);
                const serverHttpUrls = JSON.parse(process.env.ServerHttpUrls);
                const baseUrl: string = domainContext.get(domainTaskBaseUrlStateKey);

                options.logFn(
                    `Https to http url transformation is active.\n` +
                    `Server HTTPS urls: ${JSON.parse(process.env.ServerHttpsUrls)}\n` +
                    `Server HTTP urls: ${JSON.parse(process.env.ServerHttpUrls)}`
                );

                // Transform Url for SSR when client requests the site via Https.
                // Page requested via Https.
                if (serverHttpUrls.length > 0) {

                    // Replacement Http url.
                    var replacementUrl = serverHttpUrls[0];
                    if (replacementUrl.indexOf("+") > -1 ||
                        replacementUrl.indexOf("0.0.0.0") > -1) {
                        const { port } = new URL(replacementUrl);
                        replacementUrl = `http://localhost:${port}`;
                    }

                    options.logFn(`Replacement URL is: ${replacementUrl}.`);

                    if (url.indexOf(http) === -1) {

                        // Without Http(s) -> internal request (without origin).

                        options.logFn("Without Http(s) -> internal request (without origin).");

                        if (!url.startsWith("/")) {
                            url = `/${url}`;
                        }

                        url = `${replacementUrl}${url}`;

                    } else if (url.indexOf(https) > -1) {

                        // With Https.

                        options.logFn("With Https.");

                        if (url.indexOf(baseUrl) > -1) {

                            // Internal request.

                            options.logFn("Internal request.");
                            url = url.replace(originUrl, replacementUrl);
                        }
                        else {

                            // Detect internal request using asp.net core urls.

                            for (var i = 0; i < serverHttpsUrls.length; i++) {
                                const httpsUrl = serverHttpsUrls[i];
                                if (url.indexOf(httpsUrl) > -1) {
                                    // Replace Https to Http server address.
                                    url = url.replace(httpsUrl, replacementUrl);
                                    options.logFn("Internal request using ASP.NET Core 'urls' configuration was detected: URL replaced.");
                                    break;
                                }
                            }
                        }
                    }

                }
            }

        } else {

            if (!url.startsWith("/")) {
                url = `/${url}`;
            }

            url = `${originUrl}${url}`;
        }

        if (oldUrl != url) {
            options.logFn(`URL was changed successfully from '${oldUrl}' to '${url}'`);
        }
    }

    return url;
};

export function getHashCode(string: string) {
    var hash = 0;
    for (var i = 0; i < string.length; i++) {
        var character = string.charCodeAt(i);
        hash = ((hash << 5) - hash) + character;
        hash = hash & hash; // Convert to 32bit integer
    }
    return hash;
}