"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var domain = require("domain");
var domainContext = require("domain-context");
var Constants_1 = require("./Constants");
var options_1 = require("./options");
function isNode() {
    return typeof process === 'object' && process.versions && !!process.versions.node;
}
exports.isNode = isNode;
function getBaseUrl(url) {
    var noDomainBaseUrl = "";
    if (url) {
        if (domain.active) {
            domainContext.set(Constants_1.domainTaskBaseUrlStateKey, url);
        }
        else {
            noDomainBaseUrl = url;
        }
    }
    var baseUrl = domain.active ? domainContext.get(Constants_1.domainTaskBaseUrlStateKey) : noDomainBaseUrl;
    if (options_1.options.isDebug) {
        options_1.options.logFn("Base url for fetching is: " + baseUrl);
    }
    return baseUrl;
}
exports.getBaseUrl = getBaseUrl;
function getNodeOriginUrl() {
    var base = getBaseUrl();
    if (base && base.endsWith("/")) {
        return base.substring(0, base.length - 1);
    }
    return null;
}
exports.getNodeOriginUrl = getNodeOriginUrl;
function transformUrl(url) {
    if (isNode()) {
        var oldUrl = url;
        var http = "http";
        var https = "https";
        var originUrl = getNodeOriginUrl();
        var isOriginHttps = originUrl.indexOf(https) > -1;
        if (isOriginHttps) {
            if (process.env &&
                process.env.HttpsToHttpUrlTransform == "true" &&
                process.env.ServerHttpsUrls &&
                process.env.ServerHttpUrls) {
                var serverHttpsUrls = JSON.parse(process.env.ServerHttpsUrls);
                var serverHttpUrls = JSON.parse(process.env.ServerHttpUrls);
                var baseUrl = domainContext.get(Constants_1.domainTaskBaseUrlStateKey);
                options_1.options.logFn("Https to http url transformation is active.\n" +
                    ("Server HTTPS urls: " + JSON.parse(process.env.ServerHttpsUrls) + "\n") +
                    ("Server HTTP urls: " + JSON.parse(process.env.ServerHttpUrls)));
                if (serverHttpUrls.length > 0) {
                    var replacementUrl = serverHttpUrls[0];
                    if (replacementUrl.indexOf("+") > -1 ||
                        replacementUrl.indexOf("0.0.0.0") > -1) {
                        var port = new URL(replacementUrl).port;
                        replacementUrl = "http://localhost:" + port;
                    }
                    options_1.options.logFn("Replacement URL is: " + replacementUrl + ".");
                    if (url.indexOf(http) === -1) {
                        options_1.options.logFn("Without Http(s) -> internal request (without origin).");
                        if (!url.startsWith("/")) {
                            url = "/" + url;
                        }
                        url = "" + replacementUrl + url;
                    }
                    else if (url.indexOf(https) > -1) {
                        options_1.options.logFn("With Https.");
                        if (url.indexOf(baseUrl) > -1) {
                            options_1.options.logFn("Internal request.");
                            url = url.replace(originUrl, replacementUrl);
                        }
                        else {
                            for (var i = 0; i < serverHttpsUrls.length; i++) {
                                var httpsUrl = serverHttpsUrls[i];
                                if (url.indexOf(httpsUrl) > -1) {
                                    url = url.replace(httpsUrl, replacementUrl);
                                    options_1.options.logFn("Internal request using ASP.NET Core 'urls' configuration was detected: URL replaced.");
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            if (!url.startsWith("/")) {
                url = "/" + url;
            }
            url = "" + originUrl + url;
        }
        if (oldUrl != url) {
            options_1.options.logFn("URL was changed successfully from '" + oldUrl + "' to '" + url + "'");
        }
    }
    return url;
}
exports.transformUrl = transformUrl;
;
function getHashCode(string) {
    var hash = 0;
    for (var i = 0; i < string.length; i++) {
        var character = string.charCodeAt(i);
        hash = ((hash << 5) - hash) + character;
        hash = hash & hash;
    }
    return hash;
}
exports.getHashCode = getHashCode;
//# sourceMappingURL=utils.js.map