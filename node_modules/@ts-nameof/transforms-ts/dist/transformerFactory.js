"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitNode = exports.throwIfContextHasInterpolateExpressions = exports.visitSourceFile = exports.transformerFactory = void 0;
var ts = __importStar(require("typescript"));
var transforms_common_1 = require("@ts-nameof/transforms-common");
var common_1 = require("@ts-nameof/common");
var helpers_1 = require("./helpers");
var parse_1 = require("./parse");
var transform_1 = require("./transform");
exports.transformerFactory = function (context) {
    return function (file) { return visitSourceFile(file, context); };
};
function visitSourceFile(sourceFile, context) {
    var visitSourceFileContext = {
        interpolateExpressions: new Set()
    };
    try {
        var result = visitNodeAndChildren(sourceFile);
        throwIfContextHasInterpolateExpressions(visitSourceFileContext, sourceFile);
        return result;
    }
    catch (err) {
        return common_1.throwErrorForSourceFile(err.message, sourceFile.fileName);
    }
    function visitNodeAndChildren(node) {
        if (node == null)
            return node;
        node = ts.visitEachChild(node, function (childNode) { return visitNodeAndChildren(childNode); }, context);
        return visitNode(node, sourceFile, visitSourceFileContext);
    }
}
exports.visitSourceFile = visitSourceFile;
function throwIfContextHasInterpolateExpressions(context, sourceFile) {
    if (context.interpolateExpressions.size > 0) {
        var firstResult = Array.from(context.interpolateExpressions.values())[0];
        return common_1.throwError("Found a nameof.interpolate that did not exist within a "
            + ("nameof.full call expression: nameof.interpolate(" + helpers_1.getNodeText(firstResult, sourceFile) + ")"));
    }
}
exports.throwIfContextHasInterpolateExpressions = throwIfContextHasInterpolateExpressions;
function visitNode(visitingNode, sourceFile, context) {
    var parseResult = parse_1.parse(visitingNode, sourceFile, context);
    if (parseResult == null)
        return visitingNode;
    return transform_1.transform(transforms_common_1.transformCallExpression(parseResult), context);
}
exports.visitNode = visitNode;
//# sourceMappingURL=transformerFactory.js.map