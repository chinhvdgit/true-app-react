"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = void 0;
var ts = __importStar(require("typescript"));
var common_1 = require("@ts-nameof/common");
function transform(node, context) {
    switch (node.kind) {
        case "StringLiteral":
            return ts.createLiteral(node.value);
        case "ArrayLiteral":
            return ts.createArrayLiteral(node.elements.map(function (element) { return transform(element, context); }));
        case "TemplateExpression":
            if (node.parts.length === 1 && typeof node.parts[0] === "string")
                return ts.createNoSubstitutionTemplateLiteral(node.parts[0]);
            return createTemplateExpression(node, context);
        default:
            return common_1.throwError("Unsupported node kind: " + node.kind);
    }
}
exports.transform = transform;
function createTemplateExpression(node, context) {
    var firstPart = typeof node.parts[0] === "string" ? node.parts[0] : undefined;
    var parts = firstPart != null ? node.parts.slice(1) : __spreadArrays(node.parts);
    return ts.createTemplateExpression(ts.createTemplateHead(firstPart || ""), getParts());
    function getParts() {
        var templateSpans = [];
        for (var i = 0; i < parts.length; i += 2) {
            var isLast = i + 2 === parts.length;
            var interpolatedNode = parts[i];
            if (typeof interpolatedNode === "string")
                return common_1.throwError("Unexpected scenario where an interpolated node was expected, but a string was found.");
            var text = parts[i + 1];
            if (typeof text !== "string")
                return common_1.throwError("Unexpected scenario where a string was expected, but an interpolated node was found.");
            var tsExpression = interpolatedNode.expression;
            var tsText = !isLast ? ts.createTemplateMiddle(text) : ts.createTemplateTail(text);
            if (context != null)
                context.interpolateExpressions.delete(tsExpression);
            templateSpans.push(ts.createTemplateSpan(tsExpression, tsText));
        }
        return templateSpans;
    }
}
//# sourceMappingURL=transform.js.map